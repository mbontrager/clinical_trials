{
    "collab_server" : "",
    "contents" : "require(shiny)\nrequire(elastic)\nrequire(ggmap)\nrequire(leaflet)\nrequire(shinysky)\nrequire(shinythemes)\nrequire(tidyverse)\nrequire(stringr)\nrequire(googlesheets)\n\nCTstudies <- gs_read(gs_title(\"CTstudies\"))\nconnect( es_host = \"http://search-clinical-trials-net4nc47vfs2s526mzqpb3tc5y.us-west-2.es.amazonaws.com\", es_port = 80)\n\n# Tag which fields are mandatory\nfieldsMandatory <- c(\"city\", \"state\")\n\n# Generate output file()\ntableOutput <- function(ct) {\n    trials <- unique(ct$`NCT Number`)\n    CT <- filter(CTstudies, `NCT Number` %in% trials)\n    CT\n}\n\n# Run elastic search query and filter results based on form inputs\nrunQuery <- function(ct, patient.data) {\n    body <- paste0('{\"size\" : 10000,',\n                   '\"query\": {',\n                   '\"bool\": {',\n                   '\"filter\": {',\n                   '\"geo_distance\": {',\n                   '\"distance\": \"', patient.data[6],'mi\",',\n                   '\"facility.geo\": {',\n                   '\"lat\": ', patient.data[4],',',\n                   '\"lon\": ', patient.data[5], \n                   '}}}}}}')\n    out <- Search(index=\"trialsgeo\", body = body )\n    count <- length( out$hits$hits )\n    id <- unlist(lapply( 1:count, function(i) try( out$hits$hits[[i]]$`_source`$nctId )))\n    id.unique.geo <- unique(id)\n    CT <- filter(ct, `NCT Number` %in% id.unique.geo)\n    \n    # Filter by age\n    if (!patient.data[1] == \"\"){\n        age <- as.integer(patient.data[1])\n        CT <- filter(CT, minage <= age  & age <= maxage)\n    }\n    \n    # Filter by gender\n    if (!patient.data[2] == \"\"){\n        g <- patient.data[2]\n        if (g == \"male\"){\n            CT <- filter(CT, !(Gender == \"Female\"))\n        }\n        if (g == \"female\"){\n            CT <- filter(CT, !(Gender == \"Male\"))\n        }\n    }\n    \n    # Filter by Trial Type\n    if (!patient.data[7] == \"\"){\n        x <- patient.data[7]\n        if (x == \"Interventional\"){\n            CT <- filter(CT, `Study Types` == x | `Study Types` == \"Expanded Access\")\n        } else if (x == \"Observational\"){\n            CT <- filter(CT, `Study Types` == x)\n        }\n    }\n    \n    # Filter by title and disease\n    if (!patient.data[3] == \"\"){\n        d <- tolower(patient.data[3])\n        d <- unlist(strsplit(d, c(\" \", \",\", \"|\")))\n        \n        # Return entries where all search terms are in conditions\n        CT <- filter(CT, sapply(paste(tolower(Conditions), tolower(Title), tolower(Interventions)), \n                                function(x) all(sapply(d, str_detect, string = x))))\n    }\n    return(CT)\n}\n\n# add an asterisk to an input label\nlabelMandatory <- function(label) {\n    tagList(\n        label,\n        span(\"*\", class = \"mandatory_star\")\n    )\n}\n\n# query google API with city, state for latitude, longitude and return\n# a c(lat, lon) vector\nlatlon <- function(city, state) {\n    q <- paste(city, state, sep = \", \")\n    geo_reply <- geocode(q, output='latlon')\n    lat <- geo_reply$lat\n    lon <- geo_reply$lon\n    return(c(lat, lon))\n}\n\n# CSS to use in the app\nappCSS <-\n    \".mandatory_star { color: red; }\n.shiny-input-container { margin-top: 25px; }\n.select2-container {\n    width: 100% !important;\n}\n#submit_msg { margin-left: 15px; }\n#error { color: red; }\nbody { background: #fcfcfc; }\n#header { background: #fff; border-bottom: 1px solid #ddd; margin: -20px -15px 0; padding: 15px 15px 10px; }\n\"\n\nshinyApp(\n    ui = fluidPage(\n        theme = shinytheme(\"journal\"),\n        shinyjs::useShinyjs(),\n        shinyjs::inlineCSS(appCSS),\n        title = \"Subset Clinical Trials\",\n        div(id = \"header\",\n            h1(\"Subset Clinical Trials\"),\n            strong( \n                span(\"Source\"),\n                a(\"on GitHub\", href = \"https://github.com/tempuslabs/compbio/tree/martin/clinical_trials\"))\n        ),\n        \n        fluidRow(\n            column(3,\n                   div(\n                       id = \"form\",\n                       textInput(inputId = \"disease\", \n                                 label = \"Search Terms (tissue type):\", \n                                 placeholder = \"e.g. breast stage III\",\n                                 width = 300),\n                       textInput(inputId = \"age\", \n                                 label = \"Age:\",\n                                 width = 300),\n                       selectInput(inputId = \"gender\", \n                                   label = \"Gender:\",\n                                   c(\" \" = \"\",  \n                                     \"Male\" = \"Male\",\n                                     \"Female\" = \"Female\",\n                                     \"Unknown\" = \"unknown\")),\n                       selectInput(inputId = \"type\", \n                                   label = \"Study Type:\",\n                                   c(\" \" = \"\",  \n                                     \"Interventional\" = \"Interventional\",\n                                     \"Observational\" = \"Observational\",\n                                     \"Any\" = \"Any\")),\n                       textInput(inputId = \"city\", \n                                 label = labelMandatory(\"Patient City:\"),\n                                 value = \"Chicago\",\n                                 width = 300), \n                       textInput(inputId = \"state\", \n                                 label = labelMandatory(\"State:\"), \n                                 value = \"IL\"),\n                       sliderInput(\"dist\", \"Distance from Patient (Miles):\",\n                                   min = 0, max = 1000, value = 100\n                       ),\n                       actionButton(\"submit\", \"Search\", class = \"btn-primary\"),\n                       downloadButton(\"downloadData\", \"Download\")\n                   )\n            ),\n            column(9,\n                   uiOutput(\"ctrials\")\n            )\n        )\n    ),\n    \n    \n    server = function(input, output, session) {\n        \n        # Enable the Submit button when all mandatory fields are filled out\n        observe({\n            mandatoryFilled <-\n                vapply(fieldsMandatory,\n                       function(x) {\n                           !is.null(input[[x]]) && input[[x]] != \"\"\n                       },\n                       logical(1))\n            mandatoryFilled <- all(mandatoryFilled)\n            \n            shinyjs::toggleState(id = \"submit\", condition = mandatoryFilled)\n        })\n        \n        updateTable <- eventReactive(input$submit, {\n            patient.data <- c(input$age, \n                              input$gender,\n                              input$disease,\n                              latlon(input$city, input$state),\n                              input$dist,\n                              input$type)\n            CT <- runQuery(CTstudies, patient.data)\n            CT <- select(CT, `NCT Number`, Title, `Conditions`, `Sponsor/Collaborators`, Interventions)\n            CT\n        })\n        \n        output$map <- renderLeaflet({\n            loc <- latlon(input$city, input$state)\n            leaflet() %>%\n                setView(lng = loc[2], lat = loc[1], zoom = 7) %>%\n                #                addProviderTiles(\"Stamen.Watercolor\") %>%\n                addProviderTiles(\"Stamen.TonerLite\") %>%\n                addProviderTiles(\"Stamen.TonerLines\",\n                                 options = providerTileOptions(opacity = 0.35)) %>%\n                addProviderTiles(\"Stamen.TonerLabels\") %>%\n                addMarkers(lng = loc[2], lat = loc[1]) %>%\n                addCircles(lng = loc[2], \n                           lat = loc[1], \n                           100000 * 1.61, \n                           stroke = F,\n                           color = \"purple\")\n        })\n        \n        # render the clinical trials panel\n        output$ctrials <- renderUI({\n            div(\n                id = \"ctrialsPanel\",\n                h2(renderText(paste(nrow(updateTable()), \" Trials\"))),\n                DT::renderDataTable(updateTable())\n            )\n        })\n        \n        # Allow user to download responses\n        output$downloadData <- downloadHandler(\n                filename = function () { paste(Sys.Date(), \"clinical_trials.csv\", sep = \"\") },\n                content = function(file) {\n                    write.csv(tableOutput(updateTable()), file)\n                }\n        )\n    }\n)\n",
    "created" : 1485191847324.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1231403410",
    "id" : "2C79B091",
    "lastKnownWriteTime" : 1485455326,
    "last_content_update" : 1485455326380,
    "path" : "~/Dropbox/Tempus/compbio/clinical_trials/app/app.R",
    "project_path" : "app/app.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}